<!doctype html>
<html lang="es">

<!-- Mirrored from ead.murciaeduca.es/pluginfile.php/1431908/mod_resource/content/3/AD06_contenidos_Web/362_consultas_sobre_colecciones_y_documentos.html by HTTrack Website Copier/3.x [XR&CO'2014], Thu, 18 Jan 2024 16:06:26 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<link rel="stylesheet" type="text/css" href="../CSS/BASE.CSS" />
<link rel="stylesheet" type="text/css" href="../CSS/EXE_HIGH.CSS" />
<link rel="stylesheet" type="text/css" href="../CSS/CONTENT.CSS" />
<link rel="stylesheet" type="text/css" href="../CSS/NAV.CSS" />
<meta http-equiv="content-type" content="text/html;  charset=utf-8" />
<title>3.6.2.- Consultas sobre colecciones y documentos. </title>
<link rel="shortcut icon" href="../ICO/FAVICON.ICO" type="image/x-icon" />
<meta name="generator" content="eXeLearning 2.5 - exelearning.net" />
<!--[if lt IE 9]><script type="text/javascript" src="exe_html5.js"></script><![endif]-->
<script type="text/javascript" src="../JS/EXE_JQUE.JS"></script>
<script type="text/javascript" src="../JS/EXE_HIGH.JS"></script>
<script type="text/javascript" src="../JS/COMMON_I.JS"></script>
<script type="text/javascript" src="../JS/COMMON.JS"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" /></head>
<body class="exe-web-site" id="exe-node-39"><script type="text/javascript">document.body.className+=" js"</script>
<div id="content">
<p id="skipNav"><a href="#main" class="sr-av">Saltar la navegación</a></p>
<section id="emptyHeader"></section>
<nav id="siteNav">
<ul>
   <li><a href="INDEX.HTM" class="daddy main-node">Bases de datos xml.</a></li>
   <li><a href="1_INTROD.HTM" class="daddy">1.- Introduccion.</a>
   <ul class="other-section">
      <li><a href="11_DOCUM.HTM" class="no-ch">1.1.- Documentos XML centrados en datos y en texto.</a></li>
      <li><a href="12OPCION.HTM" class="no-ch">1.2.-	Opciones de almacenamiento.</a></li>
   </ul>
   </li>
   <li><a href="2BASES_D.HTM" class="daddy">2.-	Bases de Datos Nativas XML.</a>
   <ul class="other-section">
      <li><a href="21ESTRAT.HTM" class="no-ch">2.1.-	Estrategias de almacenamiento.</a></li>
      <li><a href="22COLECC.HTM" class="no-ch">2.2.-	Colecciones y documentos.</a></li>
      <li><a href="23GESTOR.HTM" class="no-ch">2.3.-	Gestores nativos XML comerciales y libres</a></li>
   </ul>
   </li>
   <li class="current-page-parent"><a href="3_BASE_D.HTM" class="current-page-parent daddy">3.- Base de datos eXist.</a>
   <ul>
      <li><a href="31_INSTA.HTM" class="no-ch">3.1.- Instalación eXist.</a></li>
      <li><a href="32_PRIME.HTM" class="no-ch">3.2.- Primeros pasos.</a></li>
      <li><a href="33_JAVA_.HTM" class="no-ch">3.3.- Java Admin Client de eXist.</a></li>
      <li><a href="34_LENGU.HTM" class="no-ch">3.4.- Lenguaje de consulta XPath.</a></li>
      <li><a href="35_EL_LE.HTM" class="daddy">3.5.- El lenguaje de consultas XQuery.</a>
      <ul class="other-section">
         <li><a href="351_MODE.HTM" class="no-ch">3.5.1.- Modelo de datos.</a></li>
         <li><a href="352_CAMI.HTM" class="no-ch">3.5.2.- Caminos de localización.</a></li>
         <li><a href="353_PRIM.HTM" class="no-ch">3.5.3.- Primeras consultas XQuery.</a></li>
         <li><a href="354_EXPR.HTM" class="no-ch">3.5.4.- Expresiones FLWOR.</a></li>
         <li><a href="355_XQUE.HTM" class="no-ch">3.5.5.- XQuery Update Facility.</a></li>
      </ul>
      </li>
      <li class="current-page-parent"><a href="36_CONEX.HTM" class="current-page-parent daddy">3.6.- Conexión a base de datos XML. API XML:DB.</a>
      <ul>
         <li><a href="361_INTR.HTM" class="no-ch">3.6.1.- Introducción.</a></li>
         <li id="active"><a href="362_CONS.HTM" class="active no-ch">3.6.2.- Consultas sobre colecciones y documentos.</a></li>
         <li><a href="363_CREA.HTM" class="no-ch">3.6.3.- Crear y borrar colecciones.</a></li>
      </ul>
      </li>
      <li><a href="37_CONEX.HTM" class="daddy">3.7.- Conexión a base de datos XML. API XJQ.</a>
      <ul class="other-section">
         <li><a href="371_INTR.HTM" class="no-ch">3.7.1.- Introducción</a></li>
         <li><a href="372_CONE.HTM" class="no-ch">3.7.2.- Conexión a la BD.</a></li>
         <li><a href="373_EJEC.HTM" class="no-ch">3.7.3.- Ejecución de consultas XQuery</a></li>
      </ul>
      </li>
   </ul>
   </li>
   <li><a href="4_BASES_.HTM" class="daddy">4.- Bases de Datos MongoDB</a>
   <ul class="other-section">
      <li><a href="41_INSTA.HTM" class="no-ch">4.1.- Instalación, configuración y manejo de una base de datos Mongo.</a></li>
      <li><a href="42_CONEX.HTM" class="no-ch">4.2.- Conexión desde JAVA a MongoDB</a></li>
   </ul>
   </li>
   <li><a href="ANEXO_LI.HTM" class="no-ch">Anexo.- Licencias de recursos.</a></li>
</ul>
</nav>
<div id='topPagination'>
<nav class="pagination noprt">
<a href="361_INTR.HTM" class="prev"><span><span>&laquo; </span>Anterior</span></a> <span class="sep">| </span><a href="363_CREA.HTM" class="next"><span>Siguiente<span> &raquo;</span></span></a>
</nav>
</div>
<div id="main-wrapper">
<section id="main">
<header id="nodeDecoration"><h1 id="nodeTitle">3.6.2.- Consultas sobre colecciones y documentos.</h1></header>
<article class="iDevice_wrapper textIdevice" id="id111">
<div class="iDevice emphasis0" >
<div id="ta111_111_2" class="block iDevice_content">
<div class="exe-text"><p style="text-align: justify;">Para consultar el repositorio, podemos usar el estándar <code>XPathQueryService </code>o la clase <code>XQueryService</code> de eXist . La API XML: DB define diferentes tipos de servicios, que pueden ser proporcionados o no por la base de datos. El  método <span><code>getService</code> </span>de clase <code>Collection </code>llama a un servicio si está disponible. El método espera que el nombre del servicio sea el primer parámetro, y su versión (como una cadena) como el segundo.</p>
<p style="text-align: justify;">El siguiente es un ejemplo del uso de XML: DB API para ejecutar una consulta de base de datos:</p>
<p style="text-align: justify;">El siguiente ejemplo ejecuta una consulta XPath que se pasa al programa como parámetro.</p>
<div style="text-align: justify;">
<div class="highlighted-code language-java">
<div>
<pre><code>import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import org.exist.xmldb.EXistResource;
public class XPathExample { 
    private static String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";
    /**
     * args[0] Should be the name of the collection to access
     * args[1] Should be the XPath expression to execute
     */
    public static void main(String args[]) throws Exception {       
        final String driver = "org.exist.xmldb.DatabaseImpl";     
        // initialize database driver
        Class cl = Class.forName(driver);
        Database database = (Database) cl.newInstance();
        database.setProperty("create-database", "true");
        DatabaseManager.registerDatabase(database);
        
        Collection col = null;
        try { 
            col = DatabaseManager.getCollection(URI + args[0]);
            XPathQueryService xpqs = (XPathQueryService)col.getService("XPathQueryService", "1.0");
            xpqs.setProperty("indent", "yes");
            ResourceSet result = xpqs.query(args[1]);
            ResourceIterator i = result.getIterator();
            Resource res = null;
            while(i.hasMoreResources()) {
                try {
                    res = i.nextResource();
                    System.out.println(res.getContent());
                } finally {
                    //dont forget to cleanup resources
                    try { ((EXistResource)res).freeResources(); } catch(XMLDBException xe) {xe.printStackTrace();}
                }
            }
        } finally {
            //dont forget to cleanup
            if(col != null) {
                try { col.close(); } catch(XMLDBException xe) {xe.printStackTrace();}
            }
        }
    }
}</code></pre>
</div>
</div>
<code></code></div>
<p style="text-align: justify;">Para ejecutar la consulta, se llama al método <code>service.query</code> (xpath). Este método devuelve un <code>ResourceSet</code>, que contiene los recursos encontrados por la consulta. <code>ResourceSet.getIterator ()</code> nos da un iterador sobre estos recursos. Cada recurso contiene un único fragmento o valor de documento, seleccionado por la expresión XPath.</p>
<p style="text-align: justify;">Internamente, eXist no distingue entre expresiones XPath y XQuery. Por lo tanto, XQueryService se asigna a la misma clase de implementación que XPathQueryService. Sin embargo, proporciona algunos métodos adicionales. Lo más importante es que cuando se habla con una base de datos integrada, XQueryService permite que la expresión XQuery se compile en una representación interna, que luego se puede reutilizar. Con la compilación, el código de ejemplo anterior se vería como sigue:</p>
<div id="yui_3_17_2_1_1596366174105_135" style="text-align: justify;">
<div class="highlighted-code language-java">
<div>
<pre><code>import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
import org.exist.xmldb.EXistResource;
public class XQueryExample {
    private static String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";
    /**
     * args[0] Should be the name of the collection to access
     * args[1] Should be the XQuery to execute
     */
    public static void main(String args[]) throws Exception {
        final String driver = "org.exist.xmldb.DatabaseImpl"; 
        // initialize database driver
        Class cl = Class.forName(driver);
        Database database = (Database) cl.newInstance();
        database.setProperty("create-database", "true");
        DatabaseManager.registerDatabase(database);  
        Collection col = null;
        try { 
            col = DatabaseManager.getCollection(URI + args[0]);
            XQueryService xqs = (XQueryService) col.getService("XQueryService", "1.0");
            xqs.setProperty("indent", "yes");
        
            CompiledExpression compiled = xqs.compile(args[1]);
            ResourceSet result = xqs.execute(compiled);
            ResourceIterator i = result.getIterator();
            Resource res = null;
            while(i.hasMoreResources()) {
                try {
                    res = i.nextResource();
                    System.out.println(res.getContent());
                } finally {
                    //dont forget to cleanup resources
                    try { ((EXistResource)res).freeResources(); } catch(XMLDBException xe) {xe.printStackTrace();}
                }
            }
        } finally {
            //dont forget to cleanup
            if(col != null) {
                try { col.close(); } catch(XMLDBException xe) {xe.printStackTrace();}
            }
        }
    }
}</code></pre>
</div>
</div>
<span style="font-size: 10pt;"><code></code></span></div>
<p style="text-align: justify;">El servidor XML-RPC almacena automáticamente en la memoria caché las expresiones compiladas, por lo que la compilación a través del controlador remoto no produce ningún efecto si la expresión ya está almacenada en la memoria caché.</p>
<p style="text-align: justify;">A continuación, nos gustaría almacenar un nuevo documento en el repositorio. Esto se hace creando un nuevo XMLResource, asignándole el contenido del nuevo documento y llamando al método storeResource de la clase Colección.</p>
<p style="text-align: justify;">Primero, un nuevo recurso es creado por el método <code>Collection.createResource ()</code>, y espera dos parámetros: el id y el tipo de recurso que se crea. Si el parámetro id es nulo, se generará automáticamente una identificación de recurso única.</p>
<p style="text-align: justify;">En algunos casos, es posible que la colección aún no exista, por lo que debemos crearla. Para crear una nueva colección, llame al método <code>createCollection</code> del servicio <code>CollectionManagementService</code>. En el siguiente ejemplo, simplemente comenzamos en el objeto de colección raíz para obtener el servicio <code>CollectionManagementService</code>.</p>
<div class="highlighted-code language-java" style="text-align: justify;">
<div>
<pre><code>import java.io.File;
import org.exist.xmldb.EXistResource;
import org.xmldb.api.base.*;
import org.xmldb.api.modules.*;
import org.xmldb.api.*;
public class StoreExample {
    
    private static String URI = "xmldb:exist://localhost:8080/exist/xmlrpc";   
    /**
     * args[0] Should be the name of the collection to access
     * args[1] Should be the name of the file to read and store in the collection
     */
    public static void main(String args[]) throws Exception {      
        if(args.length &lt; 2) {
            System.out.println("usage: StoreExample collection-path document");
            System.exit(1);
        }
        final String driver = "org.exist.xmldb.DatabaseImpl";
        
        // initialize database driver
        Class cl = Class.forName(driver);
        Database database = (Database) cl.newInstance();
        database.setProperty("create-database", "true");
        DatabaseManager.registerDatabase(database);
        Collection col = null;
        XMLResource res = null;
        try { 
            col = getOrCreateCollection(args[0]);
            
            // create new XMLResource; an id will be assigned to the new resource
            res = (XMLResource)col.createResource(null, "XMLResource");
            File f = new File(args[1]);
            if(!f.canRead()) {
                System.out.println("cannot read file " + args[1]);
                return;
            }      
            res.setContent(f);
            System.out.print("storing document " + res.getId() + "...");
            col.storeResource(res);
            System.out.println("ok.");
        } finally {
            //dont forget to cleanup
            if(res != null) {
                try { ((EXistResource)res).freeResources(); } catch(XMLDBException xe) {xe.printStackTrace();}
            }        
            if(col != null) {
                try { col.close(); } catch(XMLDBException xe) {xe.printStackTrace();}
            }
        }
    }   
    private static Collection getOrCreateCollection(String collectionUri) throws 
XMLDBException {
        return getOrCreateCollection(collectionUri, 0);
    }  
    private static Collection getOrCreateCollection(String collectionUri, int pathSegmentOffset) throws XMLDBException { 
        Collection col = DatabaseManager.getCollection(URI + collectionUri);
        if(col == null) {
            if(collectionUri.startsWith("/")) {
                collectionUri = collectionUri.substring(1);
            }
            String pathSegments[] = collectionUri.split("/");
            if(pathSegments.length &gt; 0) {
                StringBuilder path = new StringBuilder();
                for(int i = 0; i &lt;= pathSegmentOffset; i++) {
                    path.append("/" + pathSegments[i]);
                }
                Collection start = DatabaseManager.getCollection(URI + path);
                if(start == null) {
                    //collection does not exist, so create
                    String parentPath = path.substring(0, path.lastIndexOf("/"));
                    Collection parent = DatabaseManager.getCollection(URI + parentPath);
                    CollectionManagementService mgt = (CollectionManagementService) parent.getService("CollectionManagementService", "1.0");
                    col = mgt.createCollection(pathSegments[pathSegmentOffset]);
                    col.close();
                    parent.close();
                } else {
                    start.close();
                }
            }
            return getOrCreateCollection(collectionUri, ++pathSegmentOffset);
        } else {
            return col;
        }
    }
}
</code></pre>
</div>
</div>
<div style="text-align: justify;"><code></code><code></code></div>
<p style="text-align: justify;"><span>El método <code>XMLResource.setContent ()</code> carga el objeto Java como que se pasa como parámetro. El controlador eXist comprueba si el objeto es un archivo. De lo contrario, el objeto se transforma en una cadena llamando al método <code>toString ()</code> del objeto. Pasar un archivo tiene una gran ventaja: si la base de datos se ejecuta en modo incrustado, el archivo se pasará directamente al indexador. De esta forma, el contenido del archivo no tiene que cargarse en la memoria. Esto es útil si los archivos son muy grandes.</span></p></div>
</div>
</div>
</article>
<article class="iDevice_wrapper textIdevice em_iDevice" id="id112">
<div class="iDevice emphasis1" >
<header class="iDevice_header iDevice_header_noIcon"><h1 class="iDeviceTitle">Para saber más...</h1></header>
<div class="iDevice_inner">
<div class="iDevice_content_wrapper">
<div id="ta112_112_2" class="block iDevice_content">
<div class="exe-text"><p>Utiliza estas dos enlaces para estudiar como conectar java con eXist: <a href="https://gim.unex.es/blogs/ljarevalo/2009/03/08/java-exist-un-par-inseparable/">Java-eXist1</a> y <a href="https://gim.unex.es/blogs/ljarevalo/2009/03/14/java-y-exist-un-par-inseparable-22/">Java -eXist2</a>  </p>
<p>El  proceso de conexion a la BD paso a paso, se  explica en el <a href="http://www.exist-db.org/exist/apps/doc/deployment">enlace</a></p></div>
</div>
</div>
</div>
</div>
</article>
</section>
</div>
<div id='bottomPagination'>
<nav class="pagination noprt">
<a href="361_INTR.HTM" class="prev"><span><span>&laquo; </span>Anterior</span></a> <span class="sep">| </span><a href="363_CREA.HTM" class="next"><span>Siguiente<span> &raquo;</span></span></a>
</nav>
</div>
</div>
<script type="text/javascript" src="../JS/_FPD_JS.JS"></script></body>
<!-- Mirrored from ead.murciaeduca.es/pluginfile.php/1431908/mod_resource/content/3/AD06_contenidos_Web/362_consultas_sobre_colecciones_y_documentos.html by HTTrack Website Copier/3.x [XR&CO'2014], Thu, 18 Jan 2024 16:06:26 GMT -->
</html>